package com.ejoy.tool.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ejoy.tool.common.db.CitysBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "cities".
*/
public class CitysBeanDao extends AbstractDao<CitysBean, Long> {

    public static final String TABLENAME = "cities";

    /**
     * Properties of entity CitysBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property C_name = new Property(1, String.class, "c_name", false, "c_name");
        public final static Property C_pinyin = new Property(2, String.class, "c_pinyin", false, "c_pinyin");
        public final static Property C_code = new Property(3, String.class, "c_code", false, "c_code");
        public final static Property C_province = new Property(4, String.class, "c_province", false, "c_province");
        public final static Property C_area = new Property(5, String.class, "c_area", false, "c_area");
        public final static Property C_area_code = new Property(6, String.class, "c_area_code", false, "c_area_code");
        public final static Property C_tip = new Property(7, String.class, "c_tip", false, "c_tip");
    }


    public CitysBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CitysBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CitysBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String c_name = entity.getC_name();
        if (c_name != null) {
            stmt.bindString(2, c_name);
        }
 
        String c_pinyin = entity.getC_pinyin();
        if (c_pinyin != null) {
            stmt.bindString(3, c_pinyin);
        }
 
        String c_code = entity.getC_code();
        if (c_code != null) {
            stmt.bindString(4, c_code);
        }
 
        String c_province = entity.getC_province();
        if (c_province != null) {
            stmt.bindString(5, c_province);
        }
 
        String c_area = entity.getC_area();
        if (c_area != null) {
            stmt.bindString(6, c_area);
        }
 
        String c_area_code = entity.getC_area_code();
        if (c_area_code != null) {
            stmt.bindString(7, c_area_code);
        }
 
        String c_tip = entity.getC_tip();
        if (c_tip != null) {
            stmt.bindString(8, c_tip);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CitysBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String c_name = entity.getC_name();
        if (c_name != null) {
            stmt.bindString(2, c_name);
        }
 
        String c_pinyin = entity.getC_pinyin();
        if (c_pinyin != null) {
            stmt.bindString(3, c_pinyin);
        }
 
        String c_code = entity.getC_code();
        if (c_code != null) {
            stmt.bindString(4, c_code);
        }
 
        String c_province = entity.getC_province();
        if (c_province != null) {
            stmt.bindString(5, c_province);
        }
 
        String c_area = entity.getC_area();
        if (c_area != null) {
            stmt.bindString(6, c_area);
        }
 
        String c_area_code = entity.getC_area_code();
        if (c_area_code != null) {
            stmt.bindString(7, c_area_code);
        }
 
        String c_tip = entity.getC_tip();
        if (c_tip != null) {
            stmt.bindString(8, c_tip);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CitysBean readEntity(Cursor cursor, int offset) {
        CitysBean entity = new CitysBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // c_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // c_pinyin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // c_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // c_province
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // c_area
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // c_area_code
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // c_tip
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CitysBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setC_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setC_pinyin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setC_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setC_province(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setC_area(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setC_area_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setC_tip(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CitysBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CitysBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CitysBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
